#默认端口号
server.port: 8080

#指定为开发环境 可以应用application-dev.yaml
spring.profiles.active: dev

#开启springboot的debug模式
#通过启用 debug=true属性；来让控制台打印自动配置报告，这样我们就可以很方便的知道哪些自动配置类生效；
#debug: true

#日志
# logger, to see logback-spring.xml
logging.level: INFO
logging.level.app: DEBUG
logging.level.org.springframework.security: info

#MongoDB
#spring.data.mongodb.database: tgr_admin
#spring.data.mongodb.host: 127.0.0.1
#spring.data.mongodb.port: 27017
#logging.level. org.springframework.data.mongodb.core.MongoTemplate: DEBUG #配置MongoTemplate日志

#redis
spring.redis.host: 127.0.0.1
spring.redis.port: 6379  
spring.redis.password:
#spring.redis.database: 0

#数据库
#spring.datasource.driver-class-name: com.mysql.jdbc.Driver
#spring.datasource.url: jdbc:mysql://127.0.0.1:3306/tgr_admin?useUnicode=true&characterEncoding=utf-8&autoReconnect=true
#spring.datasource.username: root
#spring.datasource.password: root

#Druid
#spring.datasource.url: jdbc:mysql://127.0.0.1:3306/exiuge?useUnicode=true&characterEncoding=utf-8&autoReconnect=true
spring.datasource.url: jdbc:mysql://127.0.0.1:3306/tgr_admin2?useUnicode=true&characterEncoding=utf-8&autoReconnect=true
spring.datasource.username: root
spring.datasource.password: root

#spring.datasource.url: jdbc:mysql://localhost:3306/tgr_admin
#spring.datasource.username: root
#spring.datasource.password: root
spring.datasource.driver-class-name: com.mysql.jdbc.Driver
spring.datasource.type: com.alibaba.druid.pool.DruidDataSource
#连接池配置
spring.datasource.initialSize: 5
spring.datasource.minIdle: 5
spring.datasource.maxActive: 20
#连接等待超时时间
spring.datasource.maxWait: 60000
#配置隔多久进行一次检测(检测可以关闭的空闲连接)
spring.datasource.timeBetweenEvictionRunsMillis: 60000
#配置连接在池中的最小生存时间
spring.datasource.minEvictableIdleTimeMillis: 300000
spring.datasource.validationQuery: SELECT 1 FROM DUAL
spring.datasource.testWhileIdle: true
spring.datasource.testOnBorrow: false
spring.datasource.testOnReturn: false
# 打开PSCache，并且指定每个连接上PSCache的大小
spring.datasource.poolPreparedStatements: true
spring.datasource.maxPoolPreparedStatementPerConnectionSize: 20
# 配置监控统计拦截的filters，去掉后监控界面sql无法统计，'wall'用于防火墙
spring.datasource.filters: stat #,wall
# 通过connectProperties属性来打开mergeSql功能；慢SQL记录
spring.datasource.connectionProperties: druid.stat.mergeSql=true;druid.stat.slowSqlMillis=5000


#spring:
 # datasource:
    #type: com.alibaba.druid.pool.DruidDataSource
    #driver-class-name: com.mysql.jdbc.Driver
    #url: jdbc:mysql://127.0.0.1:3306/tgr_admin?useUnicode=true&characterEncoding=utf-8&autoReconnect=true
    #username: root
    #password: root
    #初始大小 ，最小 ，最大
    #initialSize: 5
    #minIdle: 5
    #maxActive: 20
    #配置获取连接等待超时时间
    #maxWait: 60000
    #配置监控统计拦截的filters,去掉后控制界面的sql将无法统计,wall用于防火墙
    #filters: stat,wall,log4j
    #配置间隔多久才进行一次检测,检测需要关闭的空闲连接,单位是毫秒
    #timeBetweenEvictionRunsMillis: 60000
    #配置连接池再池中的最小生存时间，单位是毫秒
    #minEvictableIdleTimeMillis: 300000
    #用来检测连接是否有效的sql，要求是一个查询语句。
    #如果validationQuery为null，testOnBorrow、testOnReturn、testWhileIdle都不会其作用。
    #validationQuery: select 1 from dual 
    #testWhileIdle: true
    #testOnBorrow: true
    #testOnReturn: true
    #是否缓存preparedStatement，也就是PSCache。
    #PSCache对支持游标的数据库性能提升巨大，比如说oracle。在mysql下建议关闭。
    #poolPreparedStatements: false
    #maxOpenPreparedStatements: 20 #要启用PSCache，必须配置大于0，当大于0时，poolPreparedStatements自动触发修改为true。在Druid中，不会存在Oracle下PSCache占用内存过多的问题，可以把这个数值配置大一些，比如说100
   
    #通过这个属性打开mergeSql功能 慢SQL记录
    #connectionProperties: druid.stat.mergeSql=true;druid.stat.slowSqlMillis=5000
    #合并多个DruidDataSource的监控数据
    #useGlobalDataSourceStat: true
#tgr
#spring.datasource.connection-timeout: 50000
#spring.datasource.max-active: 50
#spring.datasource.max-idle: 50

#Jpa
#spring.datasource.initialize: false  #是否使用’data.sql’填充数据库
spring.jpa.database:  MYSQL
spring.jpa.show-sql:  true
spring.hibernate.ddl-auto:  update
#spring.naming-strategy: 
#spring.jpa.properties.hibernate
spring.jpa.properties.hibernate.hbm2ddl.auto: update #在根据实体类自动生成数据库表
spring.jpa.properties.hibernate.format_sql: true
spring.jpa.properties.hibernate.show_sql: true

#thymeleaf start
spring.mvc.static-path-pattern: /**
spring.resources.static-locations: classpath:/static/
spring.thymeleaf.prefix: classpath:/templates/
spring.thymeleaf.suffix: .html
spring.thymeleaf.mode: HTML5
spring.thymeleaf.encoding: UTF-8
spring.http.encoding.force: true
spring.thymeleaf.content-type: text/html
spring.thymeleaf.cache: false #关闭缓存
#thymeleaf end

#异常日志文件路径
error_log_path: d:/error_log/

#上传文件 设置文件大小 临时存储限制
#spring.http.multipart.maxFileSize: 100Mb
#spring.http.multipart.maxRequestSize: 1000Mb
#spring.http.multipart.local: E:/tempFile/


securityconfig:
  logoutsuccssurl: /
  permitall: /rest/**,/bbs**
  deniedpage: /401
  urlroles: /user/index = HJ;
            /user/** = HJ;
            #/**/edit/** = admin,editor;
            #/**/delete/** = admin
  
############################################    Actuator  ##############################################################################
#management:
#  port: 9001  #对外暴露的REST API接口的端口号 不指定为应用程序启动端口号
#  security: 
#  enabled: false  #为了能够在浏览器展示效果不做安全验证

management.context-path: /monitor
management.security.enabled: false
 
#GET /autoconfig 提供了 一份自动配置报告,记录哪些自动配置条件通过了,哪些没有通过
#GET /configprops 描述配置属性如何注入 Bean
#GET /beans 描述应用程序上下文里全部的 Bean,以及它们的关系
#GET /dump 获取线程活动的快照
#GET /env 获取全部环境属性
#GET /env/{name} 根据名称获取特定的环境属性值
#GET /health 应用程序的健康指标
#GET /info 获取应用程序的信息
#GET /mappings描述全部的URL路径，以及它们和控制器（包含 Actuator 端点〉的映射关系
#GET /metrics 获取应用程序度盘信息，例如内存用 il}:;fri HTTP 的求计数
#GET /metrics/{name} 获取程序的指定名称的度量信息
#POST /shutdown 关闭应用程序，需要将 endpoints纣rntdown.enabled 设置为true
#GET /trace 提供基本的 HTTP 请求跟踪信息（时间戳、 HTTP 头等）
 
          ###############################      提供的13个接口        ##########################
#2018-12-07 16:13:23 INFO o.s.w.s.h.AbstractHandlerMethodMapping$MappingRegistry[543]: Mapped "{[/auditevents || /auditevents.json],methods=[GET],produces=[application/vnd.spring-boot.actuator.v1+json || application/json]}" onto public org.springframework.http.ResponseEntity<?> org.springframework.boot.actuate.endpoint.mvc.AuditEventsMvcEndpoint.findByPrincipalAndAfterAndType(java.lang.String,java.util.Date,java.lang.String)
#2018-12-07 16:13:23 INFO o.s.w.s.h.AbstractHandlerMethodMapping$MappingRegistry[543]: Mapped "{[/beans || /beans.json],methods=[GET],produces=[application/vnd.spring-boot.actuator.v1+json || application/json]}" onto public java.lang.Object org.springframework.boot.actuate.endpoint.mvc.EndpointMvcAdapter.invoke()
##2018-12-07 16:13:23 INFO o.s.w.s.h.AbstractHandlerMethodMapping$MappingRegistry[543]: Mapped "{[/env/{name:.*}],methods=[GET],produces=[application/vnd.spring-boot.actuator.v1+json || application/json]}" onto public java.lang.Object org.springframework.boot.actuate.endpoint.mvc.EnvironmentMvcEndpoint.value(java.lang.String)
#2018-12-07 16:13:23 INFO o.s.w.s.h.AbstractHandlerMethodMapping$MappingRegistry[543]: Mapped "{[/env || /env.json],methods=[GET],produces=[application/vnd.spring-boot.actuator.v1+json || application/json]}" onto public java.lang.Object org.springframework.boot.actuate.endpoint.mvc.EndpointMvcAdapter.invoke()
#2018-12-07 16:13:23 INFO o.s.w.s.h.AbstractHandlerMethodMapping$MappingRegistry[543]: Mapped "{[/resume || /resume.json],methods=[POST]}" onto public java.lang.Object org.springframework.cloud.endpoint.GenericPostableMvcEndpoint.invoke()
#2018-12-07 16:13:23 INFO o.s.w.s.h.AbstractHandlerMethodMapping$MappingRegistry[543]: Mapped "{[/metrics/{name:.*}],methods=[GET],produces=[application/vnd.spring-boot.actuator.v1+json || application/json]}" onto public java.lang.Object org.springframework.boot.actuate.endpoint.mvc.MetricsMvcEndpoint.value(java.lang.String)
#2018-12-07 16:13:23 INFO o.s.w.s.h.AbstractHandlerMethodMapping$MappingRegistry[543]: Mapped "{[/metrics || /metrics.json],methods=[GET],produces=[application/vnd.spring-boot.actuator.v1+json || application/json]}" onto public java.lang.Object org.springframework.boot.actuate.endpoint.mvc.EndpointMvcAdapter.invoke()
#2018-12-07 16:13:23 INFO o.s.w.s.h.AbstractHandlerMethodMapping$MappingRegistry[543]: Mapped "{[/trace || /trace.json],methods=[GET],produces=[application/vnd.spring-boot.actuator.v1+json || application/json]}" onto public java.lang.Object org.springframework.boot.actuate.endpoint.mvc.EndpointMvcAdapter.invoke()
#2018-12-07 16:13:23 INFO o.s.w.s.h.AbstractHandlerMethodMapping$MappingRegistry[543]: Mapped "{[/autoconfig || /autoconfig.json],methods=[GET],produces=[application/vnd.spring-boot.actuator.v1+json || application/json]}" onto public java.lang.Object org.springframework.boot.actuate.endpoint.mvc.EndpointMvcAdapter.invoke()
#2018-12-07 16:13:23 INFO o.s.w.s.h.AbstractHandlerMethodMapping$MappingRegistry[543]: Mapped "{[/env],methods=[POST]}" onto public java.lang.Object org.springframework.cloud.context.environment.EnvironmentManagerMvcEndpoint.value(java.util.Map<java.lang.String, java.lang.String>)
          ###############################      提供的13个接口        ##########################   
  
############################################    Actuator  ##############################################################################
  
  
  